diff --git a/cmd/notify-mailer/main.go b/cmd/notify-mailer/main.go
index 6c01efd64..6da77c7eb 100644
--- a/cmd/notify-mailer/main.go
+++ b/cmd/notify-mailer/main.go
@@ -2,6 +2,7 @@ package notmain
 
 import (
 	"context"
+	"crypto/x509"
 	"encoding/csv"
 	"encoding/json"
 	"errors"
@@ -37,6 +38,7 @@ type mailer struct {
 	recipients    []recipient
 	targetRange   interval
 	sleepInterval time.Duration
+	pa            *policy.AuthorityImpl
 	parallelSends uint
 }
 
@@ -201,7 +203,7 @@ func (m *mailer) run(ctx context.Context) error {
 					continue
 				}
 
-				err := policy.ValidEmail(w.address)
+				err := m.pa.ValidEmail(w.address)
 				if err != nil {
 					m.log.Infof("Skipping %q due to policy violation: %s", w.address, err)
 					continue
@@ -502,7 +504,12 @@ type Config struct {
 	NotifyMailer struct {
 		DB cmd.DBConfig
 		cmd.SMTPConfig
+		// Path to a file containing a list of trusted root certificates for use
+		// during the SMTP connection (as opposed to the gRPC connections).
+		SMTPTrustedRootFile string
+		cmd.HostnamePolicyConfig
 	}
+	PA     cmd.PAConfig
 	Syslog cmd.SyslogConfig
 }
 
@@ -570,6 +577,15 @@ func main() {
 		log.Infof("While reading the recipient list file %s", probs)
 	}
 
+	// Validate PA config and set defaults if needed
+	cmd.FailOnError(cfg.PA.CheckChallenges(), "Invalid PA configuration")
+
+	logger := cmd.NewLogger(cmd.SyslogConfig{StdoutLevel: 7})
+	pa, err := policy.New(cfg.PA.Identifiers, cfg.PA.Challenges, logger)
+	cmd.FailOnError(err, "Failed to create PA")
+	err = pa.LoadHostnamePolicyFile(cfg.NotifyMailer.HostnamePolicyFile)
+	cmd.FailOnError(err, "Failed to load HostnamePolicyFile")
+
 	var mailClient bmail.Mailer
 	if *dryRun {
 		log.Infof("Starting %s in dry-run mode", cmd.VersionString())
@@ -579,11 +595,26 @@ func main() {
 		smtpPassword, err := cfg.NotifyMailer.PasswordConfig.Pass()
 		cmd.FailOnError(err, "Couldn't load SMTP password from file")
 
+		var smtpRoots *x509.CertPool
+		smtpSkipVerify := false
+		if cfg.NotifyMailer.SMTPTrustedRootFile == "InsecureSkipVerify" {
+			smtpSkipVerify = true
+		} else if cfg.NotifyMailer.SMTPTrustedRootFile != "" {
+			pem, err := os.ReadFile(cfg.NotifyMailer.SMTPTrustedRootFile)
+			cmd.FailOnError(err, "Loading trusted roots file")
+			smtpRoots = x509.NewCertPool()
+			if !smtpRoots.AppendCertsFromPEM(pem) {
+				cmd.FailOnError(nil, "Failed to parse root certs PEM")
+			}
+		}
+
 		mailClient = bmail.New(
 			cfg.NotifyMailer.Server,
 			cfg.NotifyMailer.Port,
 			cfg.NotifyMailer.Username,
 			smtpPassword,
+			smtpRoots,
+			smtpSkipVerify,
 			nil,
 			*address,
 			log,
@@ -605,6 +636,7 @@ func main() {
 			end:   *end,
 		},
 		sleepInterval: *sleep,
+		pa:            pa,
 		parallelSends: *parallelSends,
 	}
 
