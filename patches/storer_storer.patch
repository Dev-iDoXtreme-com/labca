diff --git a/crl/storer/storer.go b/crl/storer/storer.go
index 5896da2ac..70e1ac8db 100644
--- a/crl/storer/storer.go
+++ b/crl/storer/storer.go
@@ -9,8 +9,12 @@ import (
 	"errors"
 	"fmt"
 	"io"
+	"io/fs"
 	"math/big"
+	"os"
+	"path/filepath"
 	"slices"
+	"sort"
 	"time"
 
 	"github.com/aws/aws-sdk-go-v2/service/s3"
@@ -39,6 +43,7 @@ type crlStorer struct {
 	cspb.UnsafeCRLStorerServer
 	s3Client         simpleS3
 	s3Bucket         string
+	localStorePath   string
 	issuers          map[issuance.NameID]*issuance.Certificate
 	uploadCount      *prometheus.CounterVec
 	sizeHistogram    *prometheus.HistogramVec
@@ -53,6 +58,7 @@ func New(
 	issuers []*issuance.Certificate,
 	s3Client simpleS3,
 	s3Bucket string,
+	localStorePath string,
 	stats prometheus.Registerer,
 	log blog.Logger,
 	clk clock.Clock,
@@ -86,6 +92,7 @@ func New(
 		issuers:          issuersByNameID,
 		s3Client:         s3Client,
 		s3Bucket:         s3Bucket,
+		localStorePath:   localStorePath,
 		uploadCount:      uploadCount,
 		sizeHistogram:    sizeHistogram,
 		latencyHistogram: latencyHistogram,
@@ -226,17 +233,21 @@ func (cs *crlStorer) UploadCRL(stream grpc.ClientStreamingServer[cspb.UploadCRLR
 	checksum := sha256.Sum256(crlBytes)
 	checksumb64 := base64.StdEncoding.EncodeToString(checksum[:])
 	crlContentType := "application/pkix-crl"
-	_, err = cs.s3Client.PutObject(stream.Context(), &s3.PutObjectInput{
-		Bucket:            &cs.s3Bucket,
-		Key:               &filename,
-		Body:              bytes.NewReader(crlBytes),
-		ChecksumAlgorithm: types.ChecksumAlgorithmSha256,
-		ChecksumSHA256:    &checksumb64,
-		ContentType:       &crlContentType,
-		Metadata:          map[string]string{"crlNumber": crlNumber.String()},
-		Expires:           &expires,
-		CacheControl:      &cacheControl,
-	})
+	if cs.localStorePath == "" {
+		_, err = cs.s3Client.PutObject(stream.Context(), &s3.PutObjectInput{
+			Bucket:            &cs.s3Bucket,
+			Key:               &filename,
+			Body:              bytes.NewReader(crlBytes),
+			ChecksumAlgorithm: types.ChecksumAlgorithmSha256,
+			ChecksumSHA256:    &checksumb64,
+			ContentType:       &crlContentType,
+			Metadata:          map[string]string{"crlNumber": crlNumber.String()},
+			Expires:           &expires,
+			CacheControl:      &cacheControl,
+		})
+	} else {
+		err = storeLocalFile(cs.localStorePath, issuer.NameID(), crlNumber, shardIdx, bytes.NewReader(crlBytes))
+	}
 
 	latency := cs.clk.Now().Sub(start)
 	cs.latencyHistogram.WithLabelValues(issuer.Subject.CommonName).Observe(latency.Seconds())
@@ -255,3 +266,46 @@ func (cs *crlStorer) UploadCRL(stream grpc.ClientStreamingServer[cspb.UploadCRLR
 
 	return stream.SendAndClose(&emptypb.Empty{})
 }
+
+func storeLocalFile(path string, nameID issuance.NameID, crlNumber *big.Int, shardIdx int64, crlBytes io.Reader) error {
+	// Write the file
+	fn := fmt.Sprintf("%s%c%d-%d-%d.crl", path, os.PathSeparator, nameID, crlNumber, shardIdx)
+	out, err := os.Create(fn)
+	defer out.Close()
+	if err != nil {
+		return fmt.Errorf("creating local crl file: %w", err)
+	}
+
+	_, err = io.Copy(out, crlBytes)
+	if err != nil {
+		return fmt.Errorf("storing crl locally: %w", err)
+	}
+
+	// Create/update the symlink
+	ln := fmt.Sprintf("%s%c%d.crl", path, os.PathSeparator, nameID)
+	lntmp := ln + ".new"
+	fn = fmt.Sprintf("%d-%d-%d.crl", nameID, crlNumber, shardIdx)
+
+	if err = os.Remove(lntmp); err != nil && !errors.Is(err, fs.ErrNotExist) {
+		return fmt.Errorf("removing symlink: %w", err)
+	}
+	if err = os.Symlink(fn, lntmp); err != nil {
+		return fmt.Errorf("creating symlink: %w", err)
+	}
+	if err = os.Rename(lntmp, ln); err != nil {
+		return fmt.Errorf("renaming symlink: %w", err)
+	}
+
+	// Remove old files (keep last five)
+	pt := fmt.Sprintf("%s%c%d-*-%d.crl", path, os.PathSeparator, nameID, shardIdx)
+	matches, err := filepath.Glob(pt)
+	sort.Strings(matches)
+	for i := 0; i < len(matches)-5; i++ {
+		err := os.Remove(matches[i])
+		if err != nil {
+			return fmt.Errorf("deleting file %s: %w", matches[i], err)
+		}
+	}
+
+	return nil
+}
