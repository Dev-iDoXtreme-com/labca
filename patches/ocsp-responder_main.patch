diff --git a/cmd/ocsp-responder/main.go b/cmd/ocsp-responder/main.go
index ec03eb05f..1cfe3e20e 100644
--- a/cmd/ocsp-responder/main.go
+++ b/cmd/ocsp-responder/main.go
@@ -91,7 +91,7 @@ type Config struct {
 
 		// Configuration for using Redis as a cache. This configuration should
 		// allow for both read and write access.
-		Redis *rocsp_config.RedisConfig `validate:"required_without=Source"`
+		Redis *rocsp_config.RedisConfig
 
 		// TLS client certificate, private key, and trusted root bundle.
 		TLS cmd.TLSConfig `validate:"required_without=Source,structonly"`
@@ -165,7 +165,7 @@ as generated by Boulder's ceremony command.
 		}
 		source, err = responder.NewMemorySourceFromFile(filename, logger)
 		cmd.FailOnError(err, fmt.Sprintf("Couldn't read file: %s", url.Path))
-	} else {
+	} else if c.OCSPResponder.Redis != nil {
 		// Set up the redis source and the combined multiplex source.
 		rocspRWClient, err := rocsp_config.MakeClient(c.OCSPResponder.Redis, clk, scope)
 		cmd.FailOnError(err, "Could not make redis client")
@@ -209,6 +209,19 @@ as generated by Boulder's ceremony command.
 
 		source, err = redis_responder.NewCheckedRedisSource(rocspSource, dbMap, sac, scope, logger)
 		cmd.FailOnError(err, "Could not create checkedRedis source")
+	} else {
+		tlsConfig, err := c.OCSPResponder.TLS.Load(scope)
+		cmd.FailOnError(err, "TLS config")
+
+		raConn, err := bgrpc.ClientSetup(c.OCSPResponder.RAService, tlsConfig, scope, clk)
+		cmd.FailOnError(err, "Failed to load credentials and create gRPC connection to RA")
+		rac := rapb.NewRegistrationAuthorityClient(raConn)
+
+		maxInflight := c.OCSPResponder.MaxInflightSignings
+		if maxInflight == 0 {
+			maxInflight = 1000
+		}
+		source = live.New(rac, int64(maxInflight), c.OCSPResponder.MaxSigningWaiters)
 	}
 
 	// Load the certificate from the file path.
